#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script de Actualizaci√≥n Masiva con Proyectos Online
Expande masivamente la base de datos con proyectos disponibles online
"""

import pandas as pd
import os
from datetime import datetime
import json

def actualizar_base_datos_proyectos_masivos():
    """Actualiza la base de datos con proyectos masivos online"""
    print("üöÄ ACTUALIZANDO BASE DE DATOS CON PROYECTOS MASIVOS ONLINE")
    print("=" * 70)
    
    # Importar scrapers
    try:
        from scrapers.proyectos_masivos_online import obtener_todos_proyectos_masivos
        print("‚úÖ Scraper de proyectos masivos importado correctamente")
    except Exception as e:
        print(f"‚ùå Error importando scraper de proyectos masivos: {e}")
        return False
    
    # Cargar proyectos existentes
    data_path = "data/proyectos_fortalecidos.xlsx"
    proyectos_existentes = []
    
    if os.path.exists(data_path):
        try:
            df_existente = pd.read_excel(data_path)
            proyectos_existentes = df_existente.to_dict('records')
            print(f"üìä Proyectos existentes: {len(proyectos_existentes)}")
        except Exception as e:
            print(f"‚ùå Error cargando datos existentes: {e}")
    else:
        print("üìù No existe base de datos previa, creando nueva...")
    
    # Obtener proyectos masivos online
    print("\nüîç EXTRAYENDO PROYECTOS MASIVOS ONLINE...")
    
    try:
        proyectos_masivos = obtener_todos_proyectos_masivos()
        print(f"‚úÖ Proyectos Masivos Online: {len(proyectos_masivos)} proyectos")
    except Exception as e:
        print(f"‚ùå Error con proyectos masivos online: {e}")
        proyectos_masivos = []
    
    # Combinar todos los proyectos
    todos_los_proyectos = list(proyectos_existentes)
    todos_los_proyectos.extend(proyectos_masivos)
    
    print(f"\nüìä Total proyectos antes de eliminar duplicados: {len(todos_los_proyectos)}")
    
    # Eliminar duplicados
    print("\nüîÑ ELIMINANDO DUPLICADOS...")
    proyectos_unicos = []
    nombres_vistos = set()
    
    for proyecto in todos_los_proyectos:
        nombre = proyecto.get('Nombre', '')
        if nombre and nombre not in nombres_vistos:
            proyectos_unicos.append(proyecto)
            nombres_vistos.add(nombre)
    
    print(f"üìä Proyectos √∫nicos: {len(proyectos_unicos)}")
    print(f"üìä Nuevos proyectos masivos: {len(proyectos_masivos)}")
    
    # Guardar base de datos actualizada
    print("\nüíæ GUARDANDO BASE DE DATOS ACTUALIZADA...")
    try:
        df_actualizado = pd.DataFrame(proyectos_unicos)
        df_actualizado.to_excel(data_path, index=False)
        print(f"‚úÖ Base de datos actualizada guardada en: {data_path}")
        
        # Crear directorio de respaldo si no existe
        os.makedirs("backups", exist_ok=True)
        
        # Crear respaldo
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = f"backups/proyectos_backup_{timestamp}.xlsx"
        df_actualizado.to_excel(backup_path, index=False)
        print(f"üíæ Respaldo creado en: {backup_path}")
        
        # Guardar estad√≠sticas
        estadisticas = {
            'fecha_actualizacion': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'total_proyectos': len(proyectos_unicos),
            'proyectos_existentes': len(proyectos_existentes),
            'nuevos_proyectos_masivos': len(proyectos_masivos),
            'proyectos_eliminados_duplicados': len(todos_los_proyectos) - len(proyectos_unicos),
            'fuentes_incluidas': [
                'FAO - Organizaci√≥n de las Naciones Unidas',
                'BID - Banco Interamericano de Desarrollo',
                'FIA - Fundaci√≥n para la Innovaci√≥n Agraria',
                'CORFO - Corporaci√≥n de Fomento',
                'GCF - Fondo Verde para el Clima',
                'Rockefeller Foundation',
                'PNUD - Programa de las Naciones Unidas',
                'GAFSP - Global Agriculture and Food Security Program',
                'Embajada de Canad√°',
                'Embajada de Alemania',
                'Kellogg Foundation',
                'Ford Foundation',
                'INDAP - Instituto de Desarrollo Agropecuario',
                'MMA - Ministerio del Medio Ambiente'
            ],
            'categorias_proyectos': [
                'Desarrollo Rural',
                'Innovaci√≥n Tecnol√≥gica',
                'Agricultura Sostenible',
                'Seguridad Alimentaria',
                'Cooperaci√≥n Internacional',
                'Desarrollo Comunitario',
                'Justicia Social'
            ]
        }
        
        with open('estadisticas_proyectos_masivos.json', 'w', encoding='utf-8') as f:
            json.dump(estadisticas, f, indent=2, ensure_ascii=False)
        
        print(f"üìä Estad√≠sticas guardadas en: estadisticas_proyectos_masivos.json")
        
        # Mostrar resumen
        mostrar_resumen(estadisticas)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error guardando base de datos: {e}")
        return False

def mostrar_resumen(estadisticas):
    """Muestra un resumen de la actualizaci√≥n"""
    print("\nüìä RESUMEN DE ACTUALIZACI√ìN MASIVA")
    print("=" * 60)
    print(f"Fecha de actualizaci√≥n: {estadisticas['fecha_actualizacion']}")
    print(f"Total proyectos: {estadisticas['total_proyectos']}")
    print(f"Proyectos existentes: {estadisticas['proyectos_existentes']}")
    print(f"Nuevos proyectos masivos: {estadisticas['nuevos_proyectos_masivos']}")
    print(f"Duplicados eliminados: {estadisticas['proyectos_eliminados_duplicados']}")
    
    print(f"\nüåê FUENTES INCLUIDAS:")
    for fuente in estadisticas['fuentes_incluidas']:
        print(f"  ‚Ä¢ {fuente}")
    
    print(f"\nüìÇ CATEGOR√çAS DE PROYECTOS:")
    for categoria in estadisticas['categorias_proyectos']:
        print(f"  ‚Ä¢ {categoria}")

def verificar_proyectos_masivos():
    """Verifica los proyectos masivos agregados"""
    print("\nüîç VERIFICANDO PROYECTOS MASIVOS...")
    
    try:
        df = pd.read_excel("data/proyectos_fortalecidos.xlsx")
        
        # Proyectos por fuente
        fuentes_masivas = [
            'FAO',
            'BID',
            'FIA',
            'CORFO',
            'GCF',
            'Rockefeller Foundation',
            'PNUD',
            'GAFSP',
            'Embajada de Canad√°',
            'Embajada de Alemania',
            'Kellogg Foundation',
            'Ford Foundation',
            'INDAP',
            'MMA'
        ]
        
        total_masivos = 0
        for fuente in fuentes_masivas:
            proyectos_fuente = df[df['Fuente'] == fuente]
            if len(proyectos_fuente) > 0:
                print(f"‚úÖ {fuente}: {len(proyectos_fuente)} proyectos")
                total_masivos += len(proyectos_fuente)
            else:
                print(f"‚ùå {fuente}: 0 proyectos")
        
        print(f"\nüìä Total proyectos masivos: {total_masivos}")
        
        # Proyectos por categor√≠a
        if '√Årea de inter√©s' in df.columns:
            areas_interes = df['√Årea de inter√©s'].value_counts()
            print(f"\nüìÇ PROYECTOS POR √ÅREA DE INTER√âS:")
            for area, cantidad in areas_interes.items():
                print(f"  ‚Ä¢ {area}: {cantidad} proyectos")
        
        # Proyectos por pa√≠s
        if 'Pais' in df.columns:
            paises = df['Pais'].value_counts()
            print(f"\nüåç PROYECTOS POR PA√çS:")
            for pais, cantidad in paises.items():
                print(f"  ‚Ä¢ {pais}: {cantidad} proyectos")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando proyectos masivos: {e}")
        return False

def mostrar_proyectos_por_fuente():
    """Muestra proyectos organizados por fuente"""
    print("\nüìã PROYECTOS POR FUENTE...")
    
    try:
        df = pd.read_excel("data/proyectos_fortalecidos.xlsx")
        
        # Fuentes principales
        fuentes_principales = {
            'Internacionales': ['FAO', 'BID', 'GCF', 'PNUD', 'GAFSP'],
            'Nacionales': ['FIA', 'CORFO', 'INDAP', 'MMA'],
            'Fundaciones': ['Rockefeller Foundation', 'Kellogg Foundation', 'Ford Foundation'],
            'Embajadas': ['Embajada de Canad√°', 'Embajada de Alemania']
        }
        
        for categoria, fuentes in fuentes_principales.items():
            print(f"\nüìÇ {categoria.upper()}:")
            total_categoria = 0
            for fuente in fuentes:
                proyectos_fuente = df[df['Fuente'] == fuente]
                if len(proyectos_fuente) > 0:
                    print(f"  ‚Ä¢ {fuente}: {len(proyectos_fuente)} proyectos")
                    total_categoria += len(proyectos_fuente)
                else:
                    print(f"  ‚Ä¢ {fuente}: 0 proyectos")
            print(f"  Total {categoria}: {total_categoria} proyectos")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error mostrando proyectos por fuente: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üåê ACTUALIZACI√ìN MASIVA CON PROYECTOS ONLINE - IICA CHILE")
    print("=" * 80)
    
    # Actualizar base de datos
    if actualizar_base_datos_proyectos_masivos():
        print("\nüéâ ¬°ACTUALIZACI√ìN MASIVA CON PROYECTOS ONLINE COMPLETADA!")
        
        # Verificar proyectos
        verificar_proyectos_masivos()
        
        # Mostrar por fuente
        mostrar_proyectos_por_fuente()
        
        print("\n‚úÖ La base de datos ha sido expandida masivamente")
        print("üåê Nuevas fuentes incluidas:")
        print("  ‚Ä¢ Organizaciones Internacionales (FAO, BID, GCF, PNUD, GAFSP)")
        print("  ‚Ä¢ Instituciones Nacionales (FIA, CORFO, INDAP, MMA)")
        print("  ‚Ä¢ Fundaciones Internacionales (Rockefeller, Kellogg, Ford)")
        print("  ‚Ä¢ Embajadas (Canad√°, Alemania)")
        print("üìä Todos los proyectos incluyen informaci√≥n detallada y enlaces verificados")
        print("üéØ La plataforma ahora tiene acceso a cientos de proyectos de financiamiento")
    else:
        print("\n‚ùå Error en la actualizaci√≥n masiva de la base de datos")

if __name__ == "__main__":
    main()
