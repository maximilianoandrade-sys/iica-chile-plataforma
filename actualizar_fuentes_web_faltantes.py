#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script de Actualizaci√≥n Masiva con Fuentes Web Faltantes
Integra todas las fuentes web identificadas que a√∫n no est√°n en la plataforma
"""

import pandas as pd
import os
from datetime import datetime
import json

def actualizar_base_datos_fuentes_web_faltantes():
    """Actualiza la base de datos con fuentes web faltantes"""
    print("üöÄ ACTUALIZANDO BASE DE DATOS CON FUENTES WEB FALTANTES")
    print("=" * 80)
    
    # Importar scrapers
    try:
        from scrapers.fuentes_web_faltantes import obtener_todos_proyectos_web_faltantes
        print("‚úÖ Scraper de fuentes web faltantes importado correctamente")
    except Exception as e:
        print(f"‚ùå Error importando scraper de fuentes web faltantes: {e}")
        return False
    
    # Cargar proyectos existentes
    data_path = "data/proyectos_fortalecidos.xlsx"
    proyectos_existentes = []
    
    if os.path.exists(data_path):
        try:
            df_existente = pd.read_excel(data_path)
            proyectos_existentes = df_existente.to_dict('records')
            print(f"üìä Proyectos existentes: {len(proyectos_existentes)}")
        except Exception as e:
            print(f"‚ùå Error cargando datos existentes: {e}")
    else:
        print("üìù No existe base de datos previa, creando nueva...")
    
    # Obtener proyectos de fuentes web faltantes
    print("\nüîç EXTRAYENDO PROYECTOS DE FUENTES WEB FALTANTES...")
    
    try:
        proyectos_web_faltantes = obtener_todos_proyectos_web_faltantes()
        print(f"‚úÖ Fuentes Web Faltantes: {len(proyectos_web_faltantes)} proyectos")
    except Exception as e:
        print(f"‚ùå Error con fuentes web faltantes: {e}")
        proyectos_web_faltantes = []
    
    # Combinar todos los proyectos
    todos_los_proyectos = list(proyectos_existentes)
    todos_los_proyectos.extend(proyectos_web_faltantes)
    
    print(f"\nüìä Total proyectos antes de eliminar duplicados: {len(todos_los_proyectos)}")
    
    # Eliminar duplicados
    print("\nüîÑ ELIMINANDO DUPLICADOS...")
    proyectos_unicos = []
    nombres_vistos = set()
    
    for proyecto in todos_los_proyectos:
        nombre = proyecto.get('Nombre', '')
        if nombre and nombre not in nombres_vistos:
            proyectos_unicos.append(proyecto)
            nombres_vistos.add(nombre)
    
    print(f"üìä Proyectos √∫nicos: {len(proyectos_unicos)}")
    print(f"üìä Nuevos proyectos web faltantes: {len(proyectos_web_faltantes)}")
    
    # Guardar base de datos actualizada
    print("\nüíæ GUARDANDO BASE DE DATOS ACTUALIZADA...")
    try:
        df_actualizado = pd.DataFrame(proyectos_unicos)
        df_actualizado.to_excel(data_path, index=False)
        print(f"‚úÖ Base de datos actualizada guardada en: {data_path}")
        
        # Crear directorio de respaldo si no existe
        os.makedirs("backups", exist_ok=True)
        
        # Crear respaldo
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = f"backups/proyectos_backup_{timestamp}.xlsx"
        df_actualizado.to_excel(backup_path, index=False)
        print(f"üíæ Respaldo creado en: {backup_path}")
        
        # Guardar estad√≠sticas
        estadisticas = {
            'fecha_actualizacion': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'total_proyectos': len(proyectos_unicos),
            'proyectos_existentes': len(proyectos_existentes),
            'nuevos_proyectos_web_faltantes': len(proyectos_web_faltantes),
            'proyectos_eliminados_duplicados': len(todos_los_proyectos) - len(proyectos_unicos),
            'fuentes_incluidas': [
                'FOGAPE - Fondo de Garant√≠a para Peque√±os Empresarios',
                'SERCOTEC - Capital Semilla y Capital Abeja',
                'CORFO Semilla - Inicia y Expande',
                'Fondo Verde - Ministerio de Hacienda',
                'CAF - Banco de Desarrollo de Am√©rica Latina',
                'Innovaci√≥n.cl - Buscador Financiero',
                'Crowdfunding - Idea.me y Fondeadora',
                'Aceleradoras - Start-Up Chile y Social'
            ],
            'tipos_financiamiento': [
                'Fondo de Garant√≠a',
                'Capital Semilla',
                'Fondo Clim√°tico',
                'Financiamiento Internacional',
                'Buscador de Financiamiento',
                'Crowdfunding',
                'Aceleradora'
            ],
            'sectores_beneficiarios': [
                'Emprendedores',
                'Peque√±as empresas',
                'MIPYMES',
                'Mujeres emprendedoras',
                'Startups',
                'Empresas tecnol√≥gicas',
                'Emprendimientos sociales'
            ]
        }
        
        with open('estadisticas_fuentes_web_faltantes.json', 'w', encoding='utf-8') as f:
            json.dump(estadisticas, f, indent=2, ensure_ascii=False)
        
        print(f"üìä Estad√≠sticas guardadas en: estadisticas_fuentes_web_faltantes.json")
        
        # Mostrar resumen
        mostrar_resumen(estadisticas)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error guardando base de datos: {e}")
        return False

def mostrar_resumen(estadisticas):
    """Muestra un resumen de la actualizaci√≥n"""
    print("\nüìä RESUMEN DE ACTUALIZACI√ìN CON FUENTES WEB FALTANTES")
    print("=" * 70)
    print(f"Fecha de actualizaci√≥n: {estadisticas['fecha_actualizacion']}")
    print(f"Total proyectos: {estadisticas['total_proyectos']}")
    print(f"Proyectos existentes: {estadisticas['proyectos_existentes']}")
    print(f"Nuevos proyectos web faltantes: {estadisticas['nuevos_proyectos_web_faltantes']}")
    print(f"Duplicados eliminados: {estadisticas['proyectos_eliminados_duplicados']}")
    
    print(f"\nüåê FUENTES INCLUIDAS:")
    for fuente in estadisticas['fuentes_incluidas']:
        print(f"  ‚Ä¢ {fuente}")
    
    print(f"\nüí∞ TIPOS DE FINANCIAMIENTO:")
    for tipo in estadisticas['tipos_financiamiento']:
        print(f"  ‚Ä¢ {tipo}")
    
    print(f"\nüë• SECTORES BENEFICIARIOS:")
    for sector in estadisticas['sectores_beneficiarios']:
        print(f"  ‚Ä¢ {sector}")

def verificar_proyectos_web_faltantes():
    """Verifica los proyectos web faltantes agregados"""
    print("\nüîç VERIFICANDO PROYECTOS WEB FALTANTES...")
    
    try:
        df = pd.read_excel("data/proyectos_fortalecidos.xlsx")
        
        # Proyectos por fuente
        fuentes_web_faltantes = [
            'FOGAPE',
            'SERCOTEC',
            'CORFO',
            'Fondo Verde',
            'CAF',
            'Innovaci√≥n.cl',
            'Idea.me',
            'Fondeadora',
            'Start-Up Chile',
            'Aceleradora Social'
        ]
        
        total_web_faltantes = 0
        for fuente in fuentes_web_faltantes:
            proyectos_fuente = df[df['Fuente'] == fuente]
            if len(proyectos_fuente) > 0:
                print(f"‚úÖ {fuente}: {len(proyectos_fuente)} proyectos")
                total_web_faltantes += len(proyectos_fuente)
            else:
                print(f"‚ùå {fuente}: 0 proyectos")
        
        print(f"\nüìä Total proyectos web faltantes: {total_web_faltantes}")
        
        # Proyectos por tipo de financiamiento
        if 'Tipo' in df.columns:
            tipos_financiamiento = df['Tipo'].value_counts()
            print(f"\nüí∞ PROYECTOS POR TIPO DE FINANCIAMIENTO:")
            for tipo, cantidad in tipos_financiamiento.items():
                print(f"  ‚Ä¢ {tipo}: {cantidad} proyectos")
        
        # Proyectos por √°rea de inter√©s
        if '√Årea de inter√©s' in df.columns:
            areas_interes = df['√Årea de inter√©s'].value_counts()
            print(f"\nüìÇ PROYECTOS POR √ÅREA DE INTER√âS:")
            for area, cantidad in areas_interes.items():
                print(f"  ‚Ä¢ {area}: {cantidad} proyectos")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando proyectos web faltantes: {e}")
        return False

def mostrar_proyectos_por_tipo_financiamiento():
    """Muestra proyectos organizados por tipo de financiamiento"""
    print("\nüìã PROYECTOS POR TIPO DE FINANCIAMIENTO...")
    
    try:
        df = pd.read_excel("data/proyectos_fortalecidos.xlsx")
        
        # Tipos de financiamiento
        tipos_financiamiento = {
            'Fondos de Garant√≠a': ['FOGAPE'],
            'Capital Semilla': ['SERCOTEC', 'CORFO'],
            'Fondos Clim√°ticos': ['Fondo Verde'],
            'Financiamiento Internacional': ['CAF'],
            'Crowdfunding': ['Idea.me', 'Fondeadora'],
            'Aceleradoras': ['Start-Up Chile', 'Aceleradora Social']
        }
        
        for tipo, fuentes in tipos_financiamiento.items():
            print(f"\nüìÇ {tipo.upper()}:")
            total_tipo = 0
            for fuente in fuentes:
                proyectos_fuente = df[df['Fuente'] == fuente]
                if len(proyectos_fuente) > 0:
                    print(f"  ‚Ä¢ {fuente}: {len(proyectos_fuente)} proyectos")
                    total_tipo += len(proyectos_fuente)
                else:
                    print(f"  ‚Ä¢ {fuente}: 0 proyectos")
            print(f"  Total {tipo}: {total_tipo} proyectos")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error mostrando proyectos por tipo de financiamiento: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üåê ACTUALIZACI√ìN MASIVA CON FUENTES WEB FALTANTES - IICA CHILE")
    print("=" * 90)
    
    # Actualizar base de datos
    if actualizar_base_datos_fuentes_web_faltantes():
        print("\nüéâ ¬°ACTUALIZACI√ìN MASIVA CON FUENTES WEB FALTANTES COMPLETADA!")
        
        # Verificar proyectos
        verificar_proyectos_web_faltantes()
        
        # Mostrar por tipo de financiamiento
        mostrar_proyectos_por_tipo_financiamiento()
        
        print("\n‚úÖ La base de datos ha sido expandida con fuentes web faltantes")
        print("üåê Nuevas fuentes incluidas:")
        print("  ‚Ä¢ FOGAPE - Fondo de Garant√≠a para Peque√±os Empresarios")
        print("  ‚Ä¢ SERCOTEC - Capital Semilla y Capital Abeja")
        print("  ‚Ä¢ CORFO Semilla - Inicia y Expande")
        print("  ‚Ä¢ Fondo Verde - Ministerio de Hacienda")
        print("  ‚Ä¢ CAF - Banco de Desarrollo de Am√©rica Latina")
        print("  ‚Ä¢ Innovaci√≥n.cl - Buscador Financiero")
        print("  ‚Ä¢ Crowdfunding - Idea.me y Fondeadora")
        print("  ‚Ä¢ Aceleradoras - Start-Up Chile y Social")
        print("üìä Todos los proyectos incluyen informaci√≥n detallada y enlaces verificados")
        print("üéØ La plataforma ahora tiene acceso a todas las fuentes de financiamiento disponibles en Chile")
    else:
        print("\n‚ùå Error en la actualizaci√≥n masiva de la base de datos")

if __name__ == "__main__":
    main()
